// Generated by CoffeeScript 1.7.1
(function() {
  var MobileGoldenContentPreprocessor, MobileGoldenParser, ThreadParser, TopicListParser, TypeParser, defaultOptions, domainList, extend, subDomain;

  TopicListParser = require('./parser/mobile/TopicListParser');

  ThreadParser = require('./parser/mobile/ThreadParser');

  TypeParser = require('./parser/mobile/TypeParser');

  extend = require('./utils/helper').extend;

  domainList = require('./utils/domainList');

  MobileGoldenContentPreprocessor = require('./preprocessor/MobileGoldenContentPreprocessor');

  subDomain = domainList[Math.floor(Math.random() * domainList.length)];

  defaultOptions = {
    contentPreprocessors: [new MobileGoldenContentPreprocessor(subDomain)]
  };

  MobileGoldenParser = (function() {
    function MobileGoldenParser(options) {
      this.options = extend(defaultOptions, options);
    }

    MobileGoldenParser.prototype.parseTopicList = function(responseBody, onCompleteCallback) {
      return this.parseTopics(responseBody, function(result) {
        var legacyResult;
        legacyResult = result.topics;
        legacyResult.isNextPageAvailable = result.isNextPageAvailable;
        legacyResult.isPreviousPageAvailable = result.isPreviousPageAvailable;
        legacyResult.totalNumberOfPage = result.totalNumberOfPage;
        return onCompleteCallback(legacyResult);
      });
    };

    MobileGoldenParser.prototype.parseThread = function(responseBody, onCompleteCallback) {
      return this.parseThreadContent(responseBody, function(result) {
        var legacyResult;
        legacyResult = result.replies;
        legacyResult.isNextPageAvailable = result.isNextPageAvailable;
        legacyResult.isPreviousPageAvailable = result.isPreviousPageAvailable;
        legacyResult.totalNumberOfPage = result.totalNumberOfPage;
        legacyResult.title = result.title;
        return onCompleteCallback(legacyResult);
      });
    };

    MobileGoldenParser.prototype.parseTopics = function(responseBody, onCompleteCallback) {
      return new TopicListParser().parse(responseBody, onCompleteCallback);
    };

    MobileGoldenParser.prototype.parseThreadContent = function(responseBody, onCompleteCallback) {
      return new ThreadParser(this.options.contentPreprocessors).parse(responseBody, onCompleteCallback);
    };

    MobileGoldenParser.prototype.parseTypes = function(responseBody, onCompleteCallback) {
      return new TypeParser().parse(responseBody, onCompleteCallback);
    };

    return MobileGoldenParser;

  })();

  module.exports = MobileGoldenParser;

}).call(this);

//# sourceMappingURL=MobileGoldenParser.map
